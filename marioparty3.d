module me.timz.n64.marioparty3;

import me.timz.n64.marioparty;
import me.timz.n64.plugin;
import std.algorithm;
import std.random;
import std.range;
import std.conv;
import std.traits;
import std.stdio;
import std.string;
import std.file;
import std.json;

immutable SHUFFLE_MINI_GAMES = -1;

class PlayerConfig {

}

class MarioParty3Config : MarioPartyConfig {
    bool randomBonus = true;
    string[string] bonuses;
    int[string] teams;
    bool replaceChanceSpaces = true;
    bool enhancedTaunts = false;
    bool preventRepeatMiniGames = true;
    bool randomChanceOrder = false;
    bool finalTurnItems = true;
    float luckySpaceRatio = 0.25;
    string[] blockedMiniGames;
    bool doubleCoinMiniGames = true;
    bool mpiqPermadeath = true;
    bool finalResultsDoNotProceed = true;
    bool improveLastFiveTurnsBonus = true;
    bool singleUseBattleSpaces = true;
    PlayerConfig[] players = [
        new PlayerConfig(),
        new PlayerConfig(),
        new PlayerConfig(),
        new PlayerConfig()
    ];

    this() {
        bonuses = [
            BonusType.MINI_GAME.to!string: "Mini=Game",
            BonusType.COIN.to!string:      "Coin",
            BonusType.HAPPENING.to!string: "Happening",
            BonusType.RED.to!string:       "Unlucky",
            BonusType.BLUE.to!string:      "Blue",
            BonusType.CHANCE.to!string:    "Chance",
            BonusType.BOWSER.to!string:    "Bowser",
            BonusType.BATTLE.to!string:    "Battle",
            BonusType.ITEM.to!string:      "Item",
            BonusType.BANK.to!string:      "Banking",
            BonusType.GAME_GUY.to!string:  "Gambling"
        ];

        teams = [
            Character.MARIO.to!string: 1,
            Character.LUIGI.to!string: 1,
            Character.PEACH.to!string: 2,
            Character.YOSHI.to!string: 2
        ];
    }
}

class StateConfig {
    int[][string] miniGameQueue;
    ubyte[] luckySpaces;
    int[] luckySpaceCount = [0, 0, 0, 0];
    ubyte[] usedBattleSpaces;
}

union Data {
    ubyte[0x400000] memory;
    mixin Field!(0x800D1108, Arr!(Player, 4), "players");
    mixin Field!(0x800CE200, Scene, "currentScene");
    mixin Field!(0x800CD05A, ubyte, "totalTurns");
    mixin Field!(0x800CD05B, ubyte, "currentTurn");
    mixin Field!(0x800CD067, ubyte, "currentPlayerIndex");
    mixin Field!(0x800CD069, ubyte, "currentSpaceIndex");
    mixin Field!(0x800CDA7C, Arr!(ushort, 4), "buttons");
    mixin Field!(0x8010570E, ubyte, "numberOfRolls");
    mixin Field!(0x80097650, uint, "randomState");
    mixin Field!(0x80102C58, Ptr!Instruction, "booRoutinePtr");
    mixin Field!(0x800DFE88, Instruction, "chooseGameRoutine");
    mixin Field!(0x800FAB98, Instruction, "duelRoutine");
    mixin Field!(0x800FB624, Instruction, "battleRoutine");
    mixin Field!(0x800FC3C8, Instruction, "battleRoutineComplete");
    mixin Field!(0x8000B198, Instruction, "randomByteRoutine");
    mixin Field!(0x80036574, Instruction, "textLength");
    mixin Field!(0x800365A8, Instruction, "textChar");
    mixin Field!(0x80009A1C, Instruction, "storeButtonPress");
    mixin Field!(0x8004ACE0, Instruction, "playSFX");
    mixin Field!(0x800EB094, Instruction, "spacesLoaded");
    mixin Field!(0x800FE29C, Instruction, "blueOrRedSpaceCoins");
    mixin Field!(0x800F52C4, Instruction, "determineTeams");
    mixin Field!(0x80102C08, Arr!(MiniGame, 5), "miniGameRoulette");
    mixin Field!(0x801057E0, Arr!(PlayerPanel, 4), "playerPanels");
    mixin Field!(0x80108470, Instruction, "loadBonusStat1a");
    mixin Field!(0x801084B4, Instruction, "loadBonusStat1b");
    mixin Field!(0x80108898, Instruction, "loadBonusStat2a");
    mixin Field!(0x801088DC, Instruction, "loadBonusStat2b");
    mixin Field!(0x80108CC0, Instruction, "loadBonusStat3a");
    mixin Field!(0x80108D04, Instruction, "loadBonusStat3b");
    mixin Field!(0x80101780, uint, "chancePlayer1");
    mixin Field!(0x80101784, uint, "chancePlayer2");
    mixin Field!(0x80105210, ushort, "numberOfSpaces");
    mixin Field!(0x80105214, Address, "pointerToSpaces");
    mixin Field!(0x80105220, Arr!(Address, 16), "spaceTypeTexturePointers");
    mixin Field!(0x80109568, BowserEventType, "bowserEventType");
    mixin Field!(0x8010C9E8, Arr!(uint, 4), "mpiqNoJump");
    mixin Field!(0x8010FE64, Arr!(ubyte, 3), "chanceOrder");
}

union Player {
    ubyte[0x38] _data;
    mixin Field!(0x01, ubyte, "cpuDifficulty");
    mixin Field!(0x02, ubyte, "controller");
    mixin Field!(0x03, Character, "character");
    mixin Field!(0x04, ubyte, "flags");
    mixin Field!(0x06, ushort, "gameCoinsExtra");
    mixin Field!(0x08, ushort, "gameCoinsMain");
    mixin Field!(0x0A, ushort, "coins");
    mixin Field!(0x0E, ubyte, "stars");
    mixin Field!(0x17, ubyte, "directionFlags");
    mixin Field!(0x18, Arr!(Item, 3), "items");
    mixin Field!(0x1C, Color, "color");
    mixin Field!(0x28, ushort, "miniGameCoins");
    mixin Field!(0x2A, ushort, "maxCoins");
    mixin Field!(0x2C, ubyte, "happeningSpaces");
    mixin Field!(0x2D, ubyte, "redSpaces");
    mixin Field!(0x2E, ubyte, "blueSpaces");
    mixin Field!(0x2F, ubyte, "chanceSpaces");
    mixin Field!(0x30, ubyte, "bowserSpaces");
    mixin Field!(0x31, ubyte, "battleSpaces");
    mixin Field!(0x32, ubyte, "itemSpaces");
    mixin Field!(0x33, ubyte, "bankSpaces");
    mixin Field!(0x34, ubyte, "gameGuySpaces");

    uint getBonusStat(BonusType type) {
        final switch (type) {
            case BonusType.MINI_GAME: return miniGameCoins;
            case BonusType.COIN:      return maxCoins;
            case BonusType.HAPPENING: return happeningSpaces;
            case BonusType.RED:       return redSpaces;
            case BonusType.BLUE:      return blueSpaces;
            case BonusType.CHANCE:    return chanceSpaces;
            case BonusType.BOWSER:    return bowserSpaces;
            case BonusType.BATTLE:    return battleSpaces;
            case BonusType.ITEM:      return itemSpaces;
            case BonusType.BANK:      return bankSpaces;
            case BonusType.GAME_GUY:  return gameGuySpaces;
        }
    }
}

union Space {
    ubyte[0x24] _data;
    mixin Field!(0x01, Type, "type");

    static enum Type : ubyte {
        START     = 0x0,
        BLUE      = 0x1,
        RED       = 0x2,
        INVISIBLE = 0x3,
        HAPPENING = 0x4,
        CHANCE    = 0x5,
        ITEM      = 0x6,
        BANK      = 0x7,
        INVIS_2   = 0x8,
        BATTLE    = 0x9,
        UNKNOWN_1 = 0xA,
        UNKNOWN_2 = 0xB,
        BOWSER    = 0xC,
        ARROW     = 0xD,
        STAR      = 0xE,
        GAME_GUY  = 0xF
    }
}

union PlayerPanel {
    ubyte[0x6C] _data;
    mixin Field!(0x04, ubyte, "color");
}

immutable BONUS_TEXT = [
    ["\x02\x0FMini=Game Star\x16\x19", "\x02\x0FMini=Game Stars\x16\x19", "has won the most coins\nin Mini=Games"],
    ["\x07\x0FCoin Star\x16\x19",      "\x07\x0FCoin Stars\x16\x19",      "had the most\ncoins at any one time\nduring the game"],
    ["\x05\x0FHappening Star\x16\x19", "\x05\x0FHappening Stars\x16\x19", "landed on the most\n\x05\x0F\xC3 Spaces\x16\x19"]
];

immutable BONUS_TEXT_REPLACEMENT = [
    ["\x02\x0F$NAME Star\x16\x19", "\x02\x0F$NAME Stars\x16\x19", "has won the most coins\nin Mini=Games"],
    ["\x07\x0F$NAME Star\x16\x19", "\x07\x0F$NAME Stars\x16\x19", "had the most\ncoins at any one time\nduring the game"],
    ["\x05\x0F$NAME Star\x16\x19", "\x05\x0F$NAME Stars\x16\x19", "landed on the most\n\x05\x0F\xC3 Spaces\x16\x19"],
    ["\x03\x0F$NAME Star\x16\x19", "\x03\x0F$NAME Stars\x16\x19", "landed on the most\n\x03\x0FRed Spaces\x16\x19"],
    ["\x02\x0F$NAME Star\x16\x19", "\x02\x0F$NAME Stars\x16\x19", "landed on the most\n\x02\x0FBlue Spaces\x16\x19"],
    ["\x05\x0F$NAME Star\x16\x19", "\x05\x0F$NAME Stars\x16\x19", "landed on the most\n\x05\x0F\xC2 Spaces\x16\x19"],
    ["\x03\x0F$NAME Star\x16\x19", "\x03\x0F$NAME Stars\x16\x19", "landed on the most\n\x03\x0FBowser Spaces\x16\x19"],
    ["\x05\x0F$NAME Star\x16\x19", "\x05\x0F$NAME Stars\x16\x19", "landed on the most\n\x05\x0FBattle Spaces\x16\x19"],
    ["\x05\x0F$NAME Star\x16\x19", "\x05\x0F$NAME Stars\x16\x19", "landed on the most\n\x05\x0FItem Spaces\x16\x19"],
    ["\x05\x0F$NAME Star\x16\x19", "\x05\x0F$NAME Stars\x16\x19", "landed on the most\n\x05\x0FBank Spaces\x16\x19"],
    ["\x05\x0F$NAME Star\x16\x19", "\x05\x0F$NAME Stars\x16\x19", "landed on the most\n\x05\x0FGame Guy Spaces\x16\x19"]
];

void mallocPerm(size_t size, void delegate(uint ptr) callback) {
    0x80035864.jal(cast(ushort)size, callback);
}

void freePerm(uint ptr, void delegate() callback) {
    0x80035888.jal(ptr, callback);
}

void mallocTemp(size_t size, void delegate(uint ptr) callback) {
    0x80035934.jal(cast(ushort)size, callback);
}

void freeTemp(uint ptr, void delegate() callback) {
    0x80035958.jal(ptr, callback);
}

void showPlayerMessage(string message, byte character = -1) {
    message ~= '\x00';
    gpr.sp -= cast(uint)(message.length + 0b111) & ~0b111;
    message.each!((i, c) { Ptr!char(gpr.sp)[i] = c; });
    gpr.sp -= 32;
    *Ptr!uint(gpr.sp + 16) = 0;
    *Ptr!uint(gpr.sp + 20) = 0;
    *Ptr!uint(gpr.sp + 24) = 0;
    0x800EC8EC.jal(character, gpr.sp + 32, 0, 0, { // ShowPlayerMessage
        0x800EC9DC.jal({
            0x800EC6C8.jal({                       // CloseMessage
                0x800EC6EC.jal({
                    gpr.sp += 32 + (cast(uint)(message.length + 0b111) & ~0b111);
                });
            });
        });
    });
}

void showGlobalMessage(string message, byte character = -1) {
    message ~= '\x00';
    gpr.sp -= cast(uint)(message.length + 0b111) & ~0b111;
    message.each!((i, c) { Ptr!char(gpr.sp)[i] = c; });
    gpr.sp -= 32;
    *Ptr!uint(gpr.sp + 16) = 0;
    *Ptr!uint(gpr.sp + 20) = 0;
    *Ptr!uint(gpr.sp + 24) = 0;
    0x800EC92C.jal(character, gpr.sp + 32, 0, 0, { // ShowGlobalMessage
        // 0x800ECA38?
        0x800EC6C8.jal({                           // CloseMessage
            0x800EC6EC.jal({
                gpr.sp += 32 + (cast(uint)(message.length + 0b111) & ~0b111);
            });
        });
    });
}

class MarioParty3 : MarioParty!(MarioParty3Config, Data) {
    StateConfig state;
    string gameText;
    BonusType[] bonus;
    int lastFiveTurnsBonus = 20;

    this(string name, string hash) {
        super(name, hash);

        bonus = config.bonuses.keys().map!(k => k.to!BonusType).array;
        if (config.replaceChanceSpaces) {
            bonus = bonus.remove!(b => b == BonusType.CHANCE);
        }

        allocConsole();
    }

    void loadState() {
        try {
            state = readText(dllPath ~ romName ~ "-State.json").parseJSON().fromJSON!StateConfig();
        } catch (FileException e) {
            state = new StateConfig;
        }
    }

    void saveState() {
        std.file.write(dllPath ~ romName ~ "-State.json", state.toJSON().toPrettyString());
    }

    override void loadConfig() {
        super.loadConfig();
        loadState();
    }

    override void saveConfig() {
        super.saveConfig();
        saveState();
    }

    override bool lockTeams() const {
        if (data.currentScene == Scene.CHANCE_TIME) {
            if (data.chancePlayer1 < players.length && data.chancePlayer2 < players.length) {
                return team(players[data.chancePlayer1])
                    == team(players[data.chancePlayer2]);
            }
        }
        return false;
    }

    override bool disableTeams() const {
        if (data.currentScene == Scene.BOWSER_EVENT) {
            return data.bowserEventType == BowserEventType.COIN_POTLUCK
                || data.bowserEventType == BowserEventType.REVOLUTION;
        }
        return false;
    }

    alias isBoardScene = typeof(super).isBoardScene;
    alias isScoreScene = typeof(super).isScoreScene;

    override bool isBoardScene(Scene scene) const {
        switch (scene) {
            case Scene.CHILLY_WATERS_BOARD:
            case Scene.DEEP_BLOOBER_SEA_BOARD:
            case Scene.SPINY_DESERT_BOARD:
            case Scene.WOODY_WOODS_BOARD:
            case Scene.CREEPY_CAVERN_BOARD:
            case Scene.WALUIGIS_ISLAND_BOARD:
                return true;
            default:
                return false;
        }
    }

    override bool isScoreScene(Scene scene) const {
        switch (scene) {
            case Scene.FINISH_BOARD:
            case Scene.BOWSER_EVENT:
            case Scene.LAST_FIVE_TURNS:
            case Scene.START_BOARD:
            case Scene.CHANCE_TIME:
            case Scene.MINI_GAME_RESULTS:
            case Scene.GAMBLE_GAME_RESULTS:
            case Scene.BATTLE_GAME_RESULTS:
                return true;
            default:
                return isBoardScene(scene);
        }
    }

    override void onStart() {
        super.onStart();

        data.textLength.addr.onExec({
            auto c = Ptr!char(gpr.s0 + 2);
            gameText = "";
            foreach (i; 0..gpr.s1) {
                gameText ~= *(c++);
            }

            if (gameText == "\x0B\x27\x85\x85\x85Board\x00\x00") {
                gameText = "\x07" ~ data.currentTurn.to!string ~ " " ~ Char.SLASH ~ " " ~ data.totalTurns.to!string ~ "\x19\x00\x00";
            }

            if (config.randomBonus && data.currentScene == Scene.FINISH_BOARD) {
                gameText = gameText.replace("one\nstar", "one star")
                                   .replace("\x02\x0F Mini=Game Star\x16\x19", " \x02\x0FMini=Game Star\x16\x19")
                                   .replace("\x02\x0FMini=Game Star\x16 \x19", "\x02\x0FMini=Game Star\x16\x19 ");

                foreach (i, ref bt; BONUS_TEXT) {
                    if (bt.any!(t => gameText.canFind(t))) {
                        foreach (j, ref t; bt) {
                            gameText = gameText.replace(t, BONUS_TEXT_REPLACEMENT[bonus[i]][j])
                                               .replace("$NAME", config.bonuses[bonus[i].to!string]);
                        }
                        break;
                    }
                }
            }

            if (config.improveLastFiveTurnsBonus && data.currentScene == Scene.LAST_FIVE_TURNS) {
                if (gameText.canFind("present of")) {
                    gameText = gameText.replace("10", lastFiveTurnsBonus.to!string);
                }
            }
            
            gpr.s1 = cast(ushort)gameText.length;
        });
        data.textChar.addr.onExec({ gpr.v0 = gameText[gpr.a0]; });

        if (config.teamMode) {
            data.duelRoutine.addr.onExec({
                if (!isBoardScene()) return;
                teammates(currentPlayer).each!((t) {
                    t.data.coins = 0;
                });
                gpr.ra.onExecOnce({
                    teammates(currentPlayer).each!((t) {
                        t.data.coins = currentPlayer.data.coins;
                    });
                });
            });
            
            data.battleRoutine.addr.onExec({
                if (!isBoardScene()) return;
                players.each!((p) {
                    teammates(p).filter!(t => t.index > p.index).each!((t) {
                        t.data.coins = 0;
                    });
                });
                gpr.ra.onExecOnce({
                    players.each!((p) {
                        teammates(p).filter!(t => t.index > p.index).each!((t) {
                            t.data.coins = p.data.coins;
                        });
                    });
                });
            });
        }

        if (config.alwaysDuel) {
            0x800FA854.onExec({ if (isBoardScene()) gpr.v0 = 1; });
        }

        if (config.randomBonus) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene != Scene.FINISH_BOARD) return;
                bonus.partialShuffle(3, random);
                writeln("Bonus Stars: ", bonus[0..3]);
            });
            data.loadBonusStat1a.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                gpr.v1 = data.players[gpr.s2].getBonusStat(bonus[BonusType.MINI_GAME]);
            });
            data.loadBonusStat1b.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                gpr.v0 = data.players[gpr.s2].getBonusStat(bonus[BonusType.MINI_GAME]);
            });
            data.loadBonusStat2a.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                gpr.v1 = data.players[gpr.s2].getBonusStat(bonus[BonusType.COIN]);
            });
            data.loadBonusStat2b.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                gpr.v0 = data.players[gpr.s2].getBonusStat(bonus[BonusType.COIN]);
            });
            data.loadBonusStat3a.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                gpr.v1 = data.players[gpr.s2].getBonusStat(bonus[BonusType.HAPPENING]);
            });
            data.loadBonusStat3b.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                gpr.v0 = data.players[gpr.s2].getBonusStat(bonus[BonusType.HAPPENING]);
            });
        }

        if (config.replaceChanceSpaces) {
            0x800FC594.onExec({
                if (!isBoardScene()) return;
                0x800FC5A4.val!Instruction = 0x10000085;
            });
            0x800EAEF4.onExec({
                if (!isBoardScene()) return;
                if (gpr.v0 == Space.Type.CHANCE) {
                    gpr.v0 = Space.Type.GAME_GUY;
                }
            });
        }

        if (config.preventRepeatMiniGames || config.blockedMiniGames.length > 0) {
            data.currentTurn.onWrite((ref ubyte turn) {
                if (data.currentScene != Scene.TRANSITION) return;
                if (turn != 1) return;

                foreach (ref queue; state.miniGameQueue.byValue()) {
                    queue = queue.remove!(e => e == SHUFFLE_MINI_GAMES);
                    queue.distanceShuffleUniform((queue.length-1)/2, random);
                    queue ~= SHUFFLE_MINI_GAMES;
                }
                saveState();
            });
            // Populate mini-game roulette
            0x800DFE90.onExec({
                if (!isBoardScene()) return;
                0x800DFED4.val!Instruction = NOP;
                0x800DFF40.val!Instruction = NOP;
                0x800DFF64.val!Instruction = NOP;
                0x800DFF78.val!Instruction = NOP;
                if (gpr.s0 == 0) {
                    auto type = (cast(MiniGame)gpr.v0).type;
                    auto list = [EnumMembers!MiniGame].filter!(g => g.type == type);
                    auto queue = state.miniGameQueue.require(type.to!string, list.filter!(g => !config.blockedMiniGames.canFind(g.to!string))
                                                                                 .map!(g => g.to!int)
                                                                                 .array.randomShuffle(random) ~ SHUFFLE_MINI_GAMES);
                    if (queue.front == SHUFFLE_MINI_GAMES) {
                        queue = queue[1..$];
                        queue.distanceShuffleUniform((queue.length-1)/2, random);
                        queue ~= SHUFFLE_MINI_GAMES;
                    }
                    auto game = queue.front.to!MiniGame;
                    auto altCount = *Ptr!ubyte(0x80100E18 + gpr.s2) - 1;
                    auto roulette = game ~ list.filter!(g => g != game).array.partialShuffle(altCount, random)[0..altCount];
                    roulette.randomShuffle(random).each!((i, e) => data.miniGameRoulette[i] = e);
                    0x800DF120.onExecOnce({ gpr.v0 = cast(uint)roulette.countUntil(game); });
                    state.miniGameQueue[type.to!string] = (queue[1..$] ~ queue.front);
                    saveState();
                }
                gpr.v0 = data.miniGameRoulette[gpr.s0];
            });
            // Prevent the mini-game roulette from jumping backward
            0x800DF3C0.onExec({ if (isBoardScene()) gpr.v0 = 1; });
        }

        if (config.enhancedTaunts) {
            data.storeButtonPress.addr.onExecDone({
                if (gpr.v0 == 0 || data.totalTurns == 0) return;

                SFX sfx;
                switch (data.buttons[gpr.t0]) {
                    case BUTTON.L:   sfx = SFX.TAUNT;               break;
                    case BUTTON.D_R: sfx = SFX.BEING_CHOSEN;        break;
                    case BUTTON.D_L: sfx = SFX.GETTING_AN_ITEM;     break;
                    case BUTTON.D_D: sfx = SFX.WINNING_A_STAR;      break;
                    case BUTTON.D_U: sfx = SFX.WINNING_A_MINI_GAME; break;
                    case BUTTON.C_R: sfx = SFX.DESPAIR_1;           break;
                    case BUTTON.C_L: sfx = SFX.DESPAIR_2;           break;
                    case BUTTON.C_D: sfx = SFX.LOSING_A_MINI_GAME;  break;
                    case BUTTON.C_U: sfx = SFX.LOSING_A_MINI_GAME;  break;
                    default:                                        return;
                }

                auto p = players.find!(p => p.data.controller == gpr.t0);
                if (p.empty || p.front.isCPU) return;

                data.playSFX.addr.jal(sfx, p.front.index);
            });
        }

        if (config.randomChanceOrder) {
            0x80105B58.onExec({
                if (data.currentScene != Scene.CHANCE_TIME) return;
                [0, 1, 2].randomShuffle(random).each!((i, j) => data.chanceOrder[i] = cast(ubyte)j);
            });
        }

        if (config.finalTurnItems) {
            data.currentTurn.onRead((ref ubyte turn, Address) {
                if (!isBoardScene()) return;
                if (turn != data.totalTurns) return;
                if (pc() == 0x800FE420                       || // Item Space
                   (pc() + 32).val!Instruction == 0x0C036783 || // Toad Shop
                   (pc() + 32).val!Instruction == 0x0C03B164) { // Item Shop
                    turn--;
                }
            });
        }

        if (config.luckySpaceRatio > 0) {
            Ptr!Address luckySpaceImagePtr = 0;
            bool resetLuckySpaces = state.luckySpaces.empty;
            ubyte[] bSpaces, lSpaces;
            
            0x800354F8.onExecDone({ // Finish making perm heap
                mallocPerm(LUCKY_SPACE_IMAGE.length + 0x10, (ptr) {
                    LUCKY_SPACE_IMAGE.each!((i, b) { Ptr!ubyte(ptr + 0x10)[i] = b; });
                    luckySpaceImagePtr = ptr;
                });
            });
            data.spaceTypeTexturePointers[Space.Type.UNKNOWN_1].onRead((ref Address ptr) {
                if (!isBoardScene()) return;
                if (*Ptr!Instruction(pc()) != 0x8C420000) return;
                
                ptr = luckySpaceImagePtr;
            });
            0x800EA4F0.onExec({ // Force high res space textures on full map view
                if (!isBoardScene()) return;

                gpr.a0 = false;
            });
            data.currentScene.onWrite((ref Scene scene) { // Reset lucky spaces at start of game
                if (scene == Scene.START_BOARD) {
                    state.luckySpaces.length = 0;
                    state.luckySpaceCount = [0, 0, 0, 0];
                    resetLuckySpaces = true;
                    saveState();
                }
            });
            data.spacesLoaded.addr.onExec({ // Choose lucky spaces
                if (!isBoardScene()) return;
                if (!resetLuckySpaces) return;
                auto spaces = Ptr!Space(data.pointerToSpaces);
                ubyte[] blueSpaces;
                for (auto i = 0; i < data.numberOfSpaces; i++) {
                    if (spaces[i].type == Space.Type.BLUE || spaces[i].type == Space.Type.STAR) {
                        blueSpaces ~= cast(ubyte)i;
                    }
                }
                auto luckyCount = roundTo!size_t(blueSpaces.length * min(config.luckySpaceRatio, 1.0));
                blueSpaces.partialShuffle(luckyCount, random);
                state.luckySpaces = blueSpaces[0..luckyCount];
                state.luckySpaces.sort();
                resetLuckySpaces = false;
                saveState();
            });
            0x800EAC74.onExec({ // Display lucky spaces on board
                if (!isBoardScene()) return;
                if (gpr.s3 == Space.Type.BLUE && gpr.s2 == 0) { // Cache blue and lucky space lists
                    auto spaces = Ptr!Space(data.pointerToSpaces);
                    bSpaces.length = 0;
                    lSpaces.length = 0;
                    for (auto i = 0; i < data.numberOfSpaces; i++) {
                        if (spaces[i].type != Space.Type.BLUE) continue;
                        if (state.luckySpaces.canFind(i)) {
                            lSpaces ~= cast(ubyte)i;
                        } else {
                            bSpaces ~= cast(ubyte)i;
                        }
                    }
                }
                if (gpr.s3 == Space.Type.BLUE) {
                    gpr.a0 = (gpr.s2 < bSpaces.length ? bSpaces[gpr.s2] : 0xFF);
                } else if (gpr.s3 == Space.Type.UNKNOWN_1) {
                    gpr.a0 = (gpr.s2 < lSpaces.length ? lSpaces[gpr.s2] : 0xFF);
                }
            });
            0x800FE258.onExec({ // Land on lucky space
                if (!isBoardScene()) return;
                if (!state.luckySpaces.canFind(data.currentSpaceIndex)) return;

                if (uniform!"[]"(1, 3, random) == 1) {
                    gpr.v0 = Space.Type.ITEM; // 1 in 3 chance of item event on lucky space 
                }

                state.luckySpaceCount[data.currentPlayerIndex]++;
                saveState();
            });
            data.blueOrRedSpaceCoins.addr.onExec({ // Give extra coins on lucky space
                if (!isBoardScene()) return;
                if (!state.luckySpaces.canFind(data.currentSpaceIndex)) return;

                switch (gpr.s0) {
                    case 3: gpr.s0 = [7, 10, 12, 15, 20].choice(random); break;
                    case 6: gpr.s0 =        [12, 15, 20].choice(random); break;
                    default: break;
                }
            });
            0x800FE478.onExec({ // Force Toad or Baby Bowser on lucky space
                if (!isBoardScene()) return;
                if (!state.luckySpaces.canFind(data.currentSpaceIndex)) return;
                
                gpr.v0 = uniform!"[]"(0, 1, random);
            });
            data.currentScene.onWrite((ref Scene scene) {
                if (scene != Scene.FINISH_BOARD) return;
                writeln("Lucky Spaces:");
                state.luckySpaceCount.each!((i, count) {
                    writefln("    %-8s %2d", data.players[i].character.to!string ~ ':', count);
                });
            });
        }

        if (config.doubleCoinMiniGames) {
            immutable INTERVAL = 5;
            auto doubleCoins = (ref ushort amount) {
                if (data.currentScene != Scene.MINI_GAME_RESULTS) return;
                if ((data.currentTurn - 1) % INTERVAL == 0) {
                    amount *= 2;
                }
            };
            players.each!((p) {
                p.data.gameCoinsMain.onRead(doubleCoins);
                p.data.gameCoinsExtra.onRead(doubleCoins);
            });

            0x800FEF68.onExecDone({
                if (!isBoardScene()) return;
                if (data.currentTurn % INTERVAL != 0) return;

                showGlobalMessage("          Bonus Mini=Game\xC2\n\n" ~
                                  "               \x0F\x07Coins \x3E 2\x02\x16\xFF", 0x15);
            });
        }

        if (config.mpiqPermadeath) {
            /*
            0x8010B374.onExec({
                if (data.currentScene != Scene.MPIQ) return;
                gpr.v0 = -1; // Force all answers to be incorrect for testing purposes
            });
            */
            0x8010B5B4.onExec({
                if (data.currentScene != Scene.MPIQ) return;

                bool allNoJump = data.mpiqNoJump[0] && data.mpiqNoJump[1] &&
                                 data.mpiqNoJump[2] && data.mpiqNoJump[3];

                if (gpr.v0 == 0 && !allNoJump) {
                    gpr.v0 = 1; // Prevent jumping
                } else if (gpr.v0 == 1 && allNoJump) {
                    gpr.v0 = 0; // Allow jumping
                }
            });
        }

        if (config.finalResultsDoNotProceed) {
            0x80109344.onExec({
                if (data.currentScene != Scene.FINAL_RESULTS) return;
                gpr.v0 = 0;
            });
        }

        if (config.improveLastFiveTurnsBonus) {
            0x80107260.onExec({ // Prevent Baby Bowser
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                gpr.v0 = 1;
            });

            0x80106A80.onExec({ // Prevent Whomp
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                gpr.v0 = 1;
            });
            
            0x80106ED4.onExec({ // Choose prize amount
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                lastFiveTurnsBonus = [10, 20, 20, 20, 30, 30].choice(random);
            });

            0x80106EF4.onExecDone({ // Apply prize amount
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                gpr.a1 = lastFiveTurnsBonus;
            });
        }

        if (config.singleUseBattleSpaces) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene == Scene.START_BOARD) {
                    state.usedBattleSpaces.length = 0;
                    saveState();
                }
            });

            data.battleRoutineComplete.addr.onExec({
                if (!isBoardScene()) return;
                if (!gpr.v0) return; // Battle cancelled
                auto spaces = Ptr!Space(data.pointerToSpaces);
                if (spaces[data.currentSpaceIndex].type != Space.Type.BATTLE) return;
                if (state.usedBattleSpaces.canFind(data.currentSpaceIndex)) return;
                state.usedBattleSpaces ~= data.currentSpaceIndex;
                saveState();
            });

            0x800FC594.onExec({
                if (!isBoardScene()) return;
                0x800FC5A4.val!Instruction = 0x10000085;
            });
            0x800EAEF4.onExec({
                if (!isBoardScene()) return;
                if (gpr.v0 == Space.Type.BATTLE && state.usedBattleSpaces.canFind(gpr.s2)) {
                    gpr.v0 = Space.Type.BLUE;
                }
            });
        }

        /*
        players[0].data.items[0].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[0].data.items[1].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[0].data.items[2].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[1].data.items[0].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[1].data.items[1].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[1].data.items[2].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[2].data.items[0].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[2].data.items[1].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[2].data.items[2].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[3].data.items[0].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[3].data.items[1].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        players[3].data.items[2].onWrite((ref Item item) { if (item == Item.WACKY_WATCH) item = Item.BARTER_BOX; });
        */
    }
}

shared static this() {
    name = "Mario Party 3".toStringz;
    pluginFactory = (name, hash) => new MarioParty3(name, hash);
}

enum Char : ubyte {
    SLASH = '\x5F',
    COLON = '\x7B'
}

enum Item : ubyte {
    NONE             = 0xFF,
    MUSHROOM         = 0x00,
    SKELETON_KEY     = 0x01,
    POISON_MUSHROOM  = 0x02,
    REVERSE_MUSHROOM = 0x03,
    CELLULAR_SHOPPER = 0x04,
    WARP_BLOCK       = 0x05,
    PLUNDER_CHEST    = 0x06,
    BOWSER_PHONE     = 0x07,
    DUELING_GLOVE    = 0x08,
    LUCKY_LAMP       = 0x09,
    GOLDEN_MUSHROOM  = 0x0A,
    BOO_BELL         = 0x0B,
    BOO_REPELLANT    = 0x0C,
    BOWSER_SUIT      = 0x0D,
    MAGIC_LAMP       = 0x0E,
    KOOPA_KARD       = 0x0F,
    BARTER_BOX       = 0x10,
    LUCKY_CHARM      = 0x11,
    WACKY_WATCH      = 0x12
}

enum Scene : uint {
    BOOT                     =   0,
    HAND_LINE_AND_SINKER     =   1,
    COCONUT_CONK             =   2,
    SPOTLIGHT_SWIM           =   3,
    BOULDER_BALL             =   4,
    CRAZY_COGS               =   5,
    HIDE_AND_SNEAK           =   6,
    RIDICULOUS_RELAY         =   7,
    THWOMP_PULL              =   8,
    RIVER_RAIDERS            =   9,
    TIDAL_TOSS               =  10,
    EATSA_PIZZA              =  11,
    BABY_BOWSER_BROADSIDE    =  12,
    PUMP_PUMP_AND_AWAY       =  13,
    HYPER_HYDRANTS           =  14,
    PICKING_PANIC            =  15,
    COSMIC_COASTER           =  16,
    PUDDLE_PADDLE            =  17,
    ETCH_N_CATCH             =  18,
    LOG_JAM                  =  19,
    SLOT_SYNCH               =  20,
    TREADMILL_GRILL          =  21,
    TOADSTOOL_TITAN          =  22,
    ACES_HIGH                =  23,
    BOUNCE_N_TROUNCE         =  24,
    ICE_RINK_RISK            =  25,
    LOCKED_OUT               =  26,
    CHIP_SHOT_CHALLENGE      =  27,
    PARASOL_PLUMMET          =  28,
    MESSY_MEMORY             =  29,
    PICTURE_IMPERFECT        =  30,
    MARIOS_PUZZLE_PARTY      =  31,
    THE_BEAT_GOES_ON         =  32,
    MPIQ                     =  33,
    CURTAIN_CALL             =  34,
    WATER_WHIRLED            =  35,
    FRIGID_BRIDGES           =  36,
    AWFUL_TOWER              =  37,
    CHEEP_CHEEP_CHASE        =  38,
    PIPE_CLEANERS            =  39,
    SNOWBALL_SUMMIT          =  40,
    ALL_FIRED_UP             =  41,
    STACKED_DECK             =  42,
    THREE_DOOR_MONTY         =  43,
    ROCKIN_RACEWAY           =  44,
    MERRY_GO_CHOMP           =  45,
    SLAP_DOWN                =  46,
    STORM_CHASERS            =  47,
    EYE_SORE                 =  48,
    VINE_WITH_ME             =  49,
    POPGUN_PICK_OFF          =  50,
    END_OF_THE_LINE          =  51,
    BOWSER_TOSS              =  52,
    BABY_BOWSER_BONKERS      =  53,
    MOTOR_ROOTER             =  54,
    SILLY_SCREWS             =  55,
    CROWD_COVER              =  56,
    TICK_TOCK_HOP            =  57,
    FOWL_PLAY                =  58,
    WINNERS_WHEEL            =  59,
    HEY_BATTER_BATTER        =  60,
    BOBBING_BOW_LOONS        =  61,
    DORRIE_DIP               =  62,
    SWINGING_WITH_SHARKS     =  63,
    SWING_N_SWIPE            =  64,
    STARDUST_BATTLE          =  65,
    GAME_GUYS_ROULETTE       =  66,
    GAME_GUYS_LUCKY_7        =  67,
    GAME_GUYS_MAGIC_BOXES    =  68,
    GAME_GUYS_SWEET_SURPRISE =  69,
    DIZZY_DINGHIES           =  70,
    TRANSITION               =  71,
    CHILLY_WATERS_BOARD      =  72,
    DEEP_BLOOBER_SEA_BOARD   =  73,
    SPINY_DESERT_BOARD       =  74,
    WOODY_WOODS_BOARD        =  75,
    CREEPY_CAVERN_BOARD      =  76,
    WALUIGIS_ISLAND_BOARD    =  77,
    FINISH_BOARD             =  79,
    BOWSER_EVENT             =  80,
    LAST_FIVE_TURNS          =  81,
    GENIE                    =  82,
    START_BOARD              =  83,
    FINAL_RESULTS            =  85,
    OPENING_CREDITS          =  88,
    MINI_GAME_ROOM_RETRY     = 104,
    MINI_GAME_ROOM           = 105,
    CHANCE_TIME              = 106,
    MINI_GAME_RULES          = 112,
    MINI_GAME_RESULTS        = 113,
    GAMBLE_GAME_RESULTS      = 114,
    BATTLE_GAME_RESULTS      = 116,
    CASTLE_GROUNDS           = 119,
    GAME_SETUP               = 120,
    FILE_SELECTION           = 121,
    TITLE_SCREEN             = 122,
    PEACHS_CASTLE            = 123
}

enum MiniGame : ubyte {
    HAND_LINE_AND_SINKER     =   1,
    COCONUT_CONK             =   2,
    SPOTLIGHT_SWIM           =   3,
    BOULDER_BALL             =   4,
    CRAZY_COGS               =   5,
    HIDE_AND_SNEAK           =   6,
    RIDICULOUS_RELAY         =   7,
    THWOMP_PULL              =   8,
    RIVER_RAIDERS            =   9,
    TIDAL_TOSS               =  10,
    EATSA_PIZZA              =  11,
    BABY_BOWSER_BROADSIDE    =  12,
    PUMP_PUMP_AND_AWAY       =  13,
    HYPER_HYDRANTS           =  14,
    PICKING_PANIC            =  15,
    COSMIC_COASTER           =  16,
    PUDDLE_PADDLE            =  17,
    ETCH_N_CATCH             =  18,
    LOG_JAM                  =  19,
    SLOT_SYNCH               =  20,
    TREADMILL_GRILL          =  21,
    TOADSTOOL_TITAN          =  22,
    ACES_HIGH                =  23,
    BOUNCE_N_TROUNCE         =  24,
    ICE_RINK_RISK            =  25,
    LOCKED_OUT               =  26,
    CHIP_SHOT_CHALLENGE      =  27,
    PARASOL_PLUMMET          =  28,
    MESSY_MEMORY             =  29,
    PICTURE_IMPERFECT        =  30,
    MARIOS_PUZZLE_PARTY      =  31,
    THE_BEAT_GOES_ON         =  32,
    MPIQ                     =  33,
    CURTAIN_CALL             =  34,
    WATER_WHIRLED            =  35,
    FRIGID_BRIDGES           =  36,
    AWFUL_TOWER              =  37,
    CHEEP_CHEEP_CHASE        =  38,
    PIPE_CLEANERS            =  39,
    SNOWBALL_SUMMIT          =  40,
    ALL_FIRED_UP             =  41,
    STACKED_DECK             =  42,
    THREE_DOOR_MONTY         =  43,
    ROCKIN_RACEWAY           =  44,
    MERRY_GO_CHOMP           =  45,
    SLAP_DOWN                =  46,
    STORM_CHASERS            =  47,
    EYE_SORE                 =  48,
    VINE_WITH_ME             =  49,
    POPGUN_PICK_OFF          =  50,
    END_OF_THE_LINE          =  51,
    BOWSER_TOSS              =  52,
    BABY_BOWSER_BONKERS      =  53,
    MOTOR_ROOTER             =  54,
    SILLY_SCREWS             =  55,
    CROWD_COVER              =  56,
    TICK_TOCK_HOP            =  57,
    FOWL_PLAY                =  58,
    WINNERS_WHEEL            =  59,
    HEY_BATTER_BATTER        =  60,
    BOBBING_BOW_LOONS        =  61,
    DORRIE_DIP               =  62,
    SWINGING_WITH_SHARKS     =  63,
    SWING_N_SWIPE            =  64,
    CHANCE_TIME              =  65,
    STARDUST_BATTLE          =  66,
    GAME_GUYS_ROULETTE       =  67,
    GAME_GUYS_LUCKY_7        =  68,
    GAME_GUYS_MAGIC_BOXES    =  69,
    GAME_GUYS_SWEET_SURPRISE =  70,
    DIZZY_DINGHIES           =  71,
    MARIOS_PUZZLE_PARTY_PRO  =  72
}

enum MiniGameType {
    ONE_V_THREE,
    TWO_V_TWO,
    FOUR_PLAYER,
    BATTLE,
    DUEL,
    ITEM,
    GAMBLE,
    SPECIAL
}

enum BonusType {
    MINI_GAME,
    COIN,
    HAPPENING,
    RED,
    BLUE,
    CHANCE,
    BOWSER,
    BATTLE,
    ITEM,
    BANK,
    GAME_GUY
}

enum BowserEventType : int {
    UNKNOWN           = -1,
    COINS_FOR_BOWSER  =  0,
    COIN_POTLUCK      =  1,
    SUIT_GIVEAWAY     =  2,
    PHONE_GIVEAWAY    =  3,
    CURSE             =  4,
    REVERSE_CURSE     =  5,
    SHUFFLE           =  6,
    REVOLUTION        =  7,
    BOWSER_RAN_AWAY_1 =  8,
    BOWSER_RAN_AWAY_2 =  9
}

enum SFX {
    WINNING_A_STAR       = 0x0262,
    LOSING_A_MINI_GAME   = 0x026B,
    GETTING_AN_ITEM      = 0x0274,
    WINNING_A_BOARD_GAME = 0x027D,
    DESPAIR_1            = 0x0286,
    WINNING_A_MINI_GAME  = 0x028F,
    DESPAIR_2            = 0x02AB,
    BEING_CHOSEN         = 0x02B4,
    TAUNT                = 0x02BD,
    SUPERSTAR            = 0x02C6
}

MiniGameType type(MiniGame game) {
    switch (game) {
        case 26: return MiniGameType.BATTLE;
        case 44: return MiniGameType.FOUR_PLAYER;
        default:
    }

    switch (game) {
        case  1: .. case 10: return MiniGameType.ONE_V_THREE;
        case 11: .. case 20: return MiniGameType.TWO_V_TWO;
        case 21: .. case 40: return MiniGameType.FOUR_PLAYER;
        case 41: .. case 48: return MiniGameType.BATTLE;
        case 49: .. case 58: return MiniGameType.DUEL;
        case 59: .. case 64: return MiniGameType.ITEM;
        case 67: .. case 70: return MiniGameType.GAMBLE;
        default:             return MiniGameType.SPECIAL;
    }
}

immutable ubyte[] LUCKY_SPACE_IMAGE = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0x9A, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2,
    0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2,
    0x37, 0x00, 0x88, 0xA1, 0x37, 0x00, 0x88, 0x9A, 0x37, 0x00, 0x88, 0x81, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xC6, 0x71, 0x8F, 0xB0, 0xDB, 0x71, 0x8F, 0xB0, 0xE0,
    0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1,
    0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1,
    0x71, 0x8F, 0xB0, 0xE0, 0x71, 0x8F, 0xB0, 0xDB, 0x37, 0x00, 0x88, 0xC6, 0x37, 0x00, 0x88, 0x96,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xEB, 0xF8, 0xF2, 0xC7, 0xF6, 0xF8, 0xF2, 0xC7, 0xF8,
    0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9,
    0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9,
    0xF8, 0xF2, 0xC7, 0xF8, 0xF8, 0xF2, 0xC7, 0xF6, 0xF8, 0xF2, 0xC7, 0xEB, 0x37, 0x00, 0x88, 0xCE,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE,
    0xF8, 0xF2, 0xC7, 0xEC, 0xF8, 0xF2, 0xC8, 0xF8, 0x05, 0x05, 0x53, 0xFC, 0x05, 0x05, 0x53, 0xFD,
    0x07, 0x07, 0x5C, 0xFD, 0x07, 0x07, 0x60, 0xFD, 0x07, 0x07, 0x65, 0xFD, 0x07, 0x07, 0x69, 0xFD,
    0x07, 0x07, 0x69, 0xFD, 0x07, 0x07, 0x65, 0xFD, 0x07, 0x07, 0x60, 0xFD, 0x07, 0x07, 0x5C, 0xFD,
    0x05, 0x05, 0x53, 0xFD, 0x05, 0x05, 0x53, 0xFC, 0xF8, 0xF2, 0xC8, 0xF8, 0xF8, 0xF2, 0xC7, 0xEC,
    0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED,
    0xF8, 0xF2, 0xC8, 0xF9, 0x05, 0x05, 0x53, 0xFC, 0x08, 0x08, 0x5E, 0xFD, 0x09, 0x09, 0x68, 0xFD,
    0x0A, 0x0A, 0x72, 0xFD, 0x0B, 0x0B, 0x78, 0xFD, 0x0C, 0x0C, 0x7D, 0xFD, 0x0C, 0x0C, 0x82, 0xFD,
    0x0C, 0x0C, 0x82, 0xFD, 0x0C, 0x0C, 0x7D, 0xFD, 0x0B, 0x0B, 0x78, 0xFD, 0x0A, 0x0A, 0x72, 0xFD,
    0x09, 0x09, 0x68, 0xFD, 0x08, 0x08, 0x5E, 0xFD, 0x05, 0x05, 0x53, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9,
    0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED, 0xF8, 0xF2, 0xC8, 0xF9,
    0x07, 0x07, 0x56, 0xFC, 0x09, 0x09, 0x66, 0xFD, 0x0C, 0x0C, 0x73, 0xFD, 0x0E, 0x0E, 0x7E, 0xFD,
    0x10, 0x10, 0x88, 0xFD, 0x12, 0x12, 0x90, 0xFD, 0x12, 0x12, 0x94, 0xFD, 0x13, 0x13, 0x97, 0xFD,
    0x13, 0x13, 0x97, 0xFD, 0x12, 0x12, 0x94, 0xFD, 0x12, 0x12, 0x90, 0xFD, 0x10, 0x10, 0x88, 0xFD,
    0x0E, 0x0E, 0x7E, 0xFD, 0x0C, 0x0C, 0x73, 0xFD, 0x09, 0x09, 0x66, 0xFD, 0x07, 0x07, 0x56, 0xFC,
    0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED, 0xF8, 0xF2, 0xC8, 0xF9, 0x08, 0x08, 0x5A, 0xFC,
    0x0C, 0x0C, 0x6B, 0xFD, 0x0E, 0x0E, 0x7A, 0xFD, 0x12, 0x12, 0x89, 0xFD, 0x15, 0x15, 0x93, 0xFD,
    0x18, 0x18, 0x9C, 0xFD, 0x19, 0x19, 0xA1, 0xFD, 0x1B, 0x1A, 0xA6, 0xFD, 0x1D, 0x1C, 0xA8, 0xFD,
    0x1E, 0x23, 0xA2, 0xFD, 0x5A, 0x5F, 0x9F, 0xFE, 0x8F, 0x94, 0xB2, 0xFF, 0x93, 0x98, 0xB4, 0xFF,
    0x68, 0x6E, 0x9D, 0xFE, 0x1B, 0x24, 0x87, 0xFD, 0x0E, 0x0E, 0x7A, 0xFD, 0x0C, 0x0C, 0x6B, 0xFD,
    0x08, 0x08, 0x5A, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE,
    0xF8, 0xF2, 0xC7, 0xED, 0xF8, 0xF2, 0xC8, 0xF9, 0x08, 0x08, 0x57, 0xFC, 0x0B, 0x0B, 0x6B, 0xFD,
    0x10, 0x10, 0x7D, 0xFD, 0x14, 0x14, 0x8D, 0xFD, 0x19, 0x19, 0x99, 0xFD, 0x1E, 0x1D, 0xA4, 0xFD,
    0x23, 0x22, 0xAC, 0xFD, 0x26, 0x25, 0xB1, 0xFD, 0x27, 0x26, 0xB4, 0xFD, 0x29, 0x2F, 0xAB, 0xFD,
    0x94, 0x98, 0xB8, 0xFF, 0xE7, 0xE7, 0xEC, 0xFF, 0xED, 0xED, 0xF2, 0xFF, 0xEC, 0xEC, 0xF0, 0xFF,
    0xEC, 0xED, 0xF1, 0xFF, 0xA5, 0xA8, 0xBF, 0xFF, 0x20, 0x2B, 0x8A, 0xFE, 0x10, 0x10, 0x7D, 0xFD,
    0x0B, 0x0B, 0x6B, 0xFD, 0x08, 0x08, 0x57, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xED,
    0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED,
    0xF8, 0xF2, 0xC8, 0xF9, 0x08, 0x08, 0x55, 0xFC, 0x0B, 0x0B, 0x67, 0xFD, 0x10, 0x10, 0x7A, 0xFD,
    0x15, 0x15, 0x8D, 0xFD, 0x1C, 0x1B, 0x9D, 0xFD, 0x23, 0x22, 0xA8, 0xFD, 0x29, 0x2F, 0xA8, 0xFD,
    0x50, 0x55, 0xAA, 0xFE, 0x4F, 0x55, 0xAD, 0xFE, 0x32, 0x38, 0xB0, 0xFE, 0x84, 0x88, 0xB5, 0xFF,
    0xEE, 0xEE, 0xF2, 0xFF, 0xC5, 0xC6, 0xD4, 0xFF, 0x78, 0x7F, 0x9E, 0xFF, 0x6F, 0x76, 0x96, 0xFF,
    0xB4, 0xB6, 0xC6, 0xFF, 0xEC, 0xED, 0xF1, 0xFF, 0x70, 0x76, 0xA3, 0xFE, 0x15, 0x17, 0x8C, 0xFD,
    0x10, 0x10, 0x7A, 0xFD, 0x0B, 0x0B, 0x67, 0xFD, 0x08, 0x08, 0x55, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9,
    0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x96, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0xC5, 0xF8, 0xF2, 0xC7, 0xEB, 0xF8, 0xF2, 0xC8, 0xF9,
    0x07, 0x07, 0x54, 0xFC, 0x0A, 0x0A, 0x5F, 0xFD, 0x0E, 0x0E, 0x74, 0xFD, 0x15, 0x15, 0x8A, 0xFD,
    0x1D, 0x1C, 0x9B, 0xFD, 0x25, 0x24, 0xA9, 0xFD, 0x2F, 0x34, 0xAA, 0xFD, 0xA1, 0xA5, 0xBF, 0xFF,
    0xE7, 0xE8, 0xED, 0xFF, 0xE6, 0xE7, 0xED, 0xFF, 0xAE, 0xB1, 0xC5, 0xFF, 0xD8, 0xD9, 0xE2, 0xFF,
    0xD7, 0xD8, 0xE1, 0xFF, 0xB2, 0xB5, 0xC7, 0xFF, 0xE6, 0xE8, 0xED, 0xFF, 0xE7, 0xE8, 0xEC, 0xFF,
    0xA4, 0xA8, 0xBD, 0xFF, 0x88, 0x8D, 0xAC, 0xFF, 0x47, 0x4E, 0x9E, 0xFE, 0x1D, 0x1C, 0x9B, 0xFD,
    0x15, 0x15, 0x8A, 0xFD, 0x0E, 0x0E, 0x74, 0xFD, 0x0A, 0x0A, 0x5F, 0xFD, 0x07, 0x07, 0x54, 0xFC,
    0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xEB, 0x37, 0x00, 0x88, 0xC5, 0x37, 0x00, 0x88, 0x81,
    0x37, 0x00, 0x88, 0x99, 0x71, 0x8F, 0xB0, 0xDB, 0xF8, 0xF2, 0xC8, 0xF6, 0x06, 0x06, 0x53, 0xFC,
    0x08, 0x08, 0x55, 0xFD, 0x0D, 0x0D, 0x6A, 0xFD, 0x14, 0x14, 0x81, 0xFD, 0x1B, 0x1A, 0x95, 0xFD,
    0x24, 0x23, 0xA6, 0xFD, 0x2C, 0x2F, 0xAD, 0xFD, 0x5A, 0x62, 0xA6, 0xFE, 0xEA, 0xEB, 0xF0, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFD, 0xFF, 0xF9, 0xF9, 0xFB, 0xFF,
    0xCB, 0xCD, 0xD9, 0xFF, 0xF9, 0xFA, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xE9, 0xEA, 0xEF, 0xFF, 0x58, 0x61, 0x9E, 0xFE, 0x2C, 0x2F, 0xAD, 0xFD, 0x24, 0x23, 0xA6, 0xFD,
    0x1B, 0x1A, 0x95, 0xFD, 0x14, 0x14, 0x81, 0xFD, 0x0D, 0x0D, 0x6A, 0xFD, 0x08, 0x08, 0x55, 0xFD,
    0x06, 0x06, 0x53, 0xFC, 0xF8, 0xF2, 0xC8, 0xF6, 0x71, 0x8F, 0xB0, 0xDB, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xA0, 0x71, 0x8F, 0xB0, 0xE0, 0xF8, 0xF2, 0xC8, 0xF9, 0x07, 0x07, 0x54, 0xFD,
    0x0A, 0x0A, 0x5E, 0xFD, 0x10, 0x10, 0x75, 0xFD, 0x17, 0x17, 0x8B, 0xFD, 0x21, 0x20, 0x9F, 0xFD,
    0x35, 0x3D, 0xA3, 0xFE, 0x9C, 0xA0, 0xBD, 0xFF, 0xD1, 0xD3, 0xDD, 0xFF, 0xFA, 0xFB, 0xFC, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xF2, 0xF5, 0xFF,
    0xE2, 0xE3, 0xE9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFB, 0xFB, 0xFC, 0xFF, 0xD2, 0xD3, 0xDE, 0xFF, 0x9B, 0x9F, 0xBC, 0xFF, 0x34, 0x3B, 0xA4, 0xFE,
    0x21, 0x20, 0x9F, 0xFD, 0x17, 0x17, 0x8B, 0xFD, 0x10, 0x10, 0x75, 0xFD, 0x0A, 0x0A, 0x5E, 0xFD,
    0x07, 0x07, 0x54, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE0, 0x37, 0x00, 0x88, 0xA0,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x07, 0x07, 0x54, 0xFD,
    0x0C, 0x0C, 0x62, 0xFD, 0x12, 0x12, 0x7B, 0xFD, 0x1B, 0x1A, 0x94, 0xFD, 0x26, 0x25, 0xA6, 0xFD,
    0x8B, 0x8E, 0xB2, 0xFF, 0xF7, 0xF7, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xEB, 0xEF, 0xFF,
    0xE7, 0xE8, 0xED, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF7, 0xF9, 0xFF, 0x8B, 0x90, 0xB3, 0xFF,
    0x26, 0x25, 0xA6, 0xFD, 0x1B, 0x1A, 0x94, 0xFD, 0x12, 0x12, 0x7B, 0xFD, 0x0C, 0x0C, 0x62, 0xFD,
    0x07, 0x07, 0x54, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x09, 0x09, 0x55, 0xFD,
    0x0E, 0x0E, 0x68, 0xFD, 0x15, 0x15, 0x81, 0xFD, 0x1F, 0x1E, 0x99, 0xFD, 0x2A, 0x29, 0xAB, 0xFD,
    0xA2, 0xA5, 0xBA, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xEB, 0xF0, 0xFF,
    0xE9, 0xEA, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xA3, 0xA8, 0xBE, 0xFF,
    0x2A, 0x29, 0xAB, 0xFD, 0x1F, 0x1E, 0x99, 0xFD, 0x15, 0x15, 0x81, 0xFD, 0x0E, 0x0E, 0x68, 0xFD,
    0x09, 0x09, 0x55, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x0A, 0x0A, 0x56, 0xFD,
    0x0F, 0x0F, 0x6D, 0xFD, 0x16, 0x16, 0x86, 0xFD, 0x21, 0x20, 0x9C, 0xFD, 0x2E, 0x2D, 0xAE, 0xFD,
    0x6F, 0x75, 0xAC, 0xFE, 0xEC, 0xED, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF4, 0xF5, 0xF8, 0xFF,
    0xF2, 0xF3, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0xEC, 0xF0, 0xFF, 0x70, 0x75, 0xAF, 0xFE,
    0x2E, 0x2D, 0xAE, 0xFD, 0x21, 0x20, 0x9C, 0xFD, 0x16, 0x16, 0x86, 0xFD, 0x0F, 0x0F, 0x6D, 0xFD,
    0x0A, 0x0A, 0x56, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x0A, 0x0A, 0x56, 0xFD,
    0x0F, 0x0F, 0x6F, 0xFD, 0x17, 0x17, 0x87, 0xFD, 0x22, 0x21, 0x9D, 0xFD, 0x2F, 0x2E, 0xB0, 0xFD,
    0x3C, 0x3F, 0xB5, 0xFD, 0x8C, 0x90, 0xB8, 0xFF, 0xDB, 0xDC, 0xE4, 0xFF, 0xEF, 0xEF, 0xF3, 0xFF,
    0xF3, 0xF3, 0xF6, 0xFF, 0xF6, 0xF6, 0xF8, 0xFF, 0xF9, 0xFA, 0xFB, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF,
    0xFE, 0xFE, 0xFE, 0xFF, 0xF9, 0xFA, 0xFB, 0xFF, 0xF6, 0xF6, 0xF8, 0xFF, 0xF3, 0xF4, 0xF6, 0xFF,
    0xEF, 0xEF, 0xF3, 0xFF, 0xDB, 0xDB, 0xE3, 0xFF, 0x8A, 0x8E, 0xB8, 0xFF, 0x3C, 0x3F, 0xB5, 0xFD,
    0x2F, 0x2E, 0xB0, 0xFD, 0x22, 0x21, 0x9D, 0xFD, 0x17, 0x17, 0x87, 0xFD, 0x0F, 0x0F, 0x6F, 0xFD,
    0x0A, 0x0A, 0x56, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x0A, 0x0A, 0x56, 0xFD,
    0x0F, 0x0F, 0x6F, 0xFD, 0x17, 0x17, 0x87, 0xFD, 0x22, 0x21, 0x9D, 0xFD, 0x2F, 0x2E, 0xB0, 0xFD,
    0x3F, 0x3F, 0xBC, 0xFD, 0x54, 0x5B, 0xA9, 0xFE, 0x9F, 0xA3, 0xB8, 0xFF, 0xCA, 0xCC, 0xD7, 0xFF,
    0xD7, 0xD9, 0xE1, 0xFF, 0xE2, 0xE3, 0xEA, 0xFF, 0xF0, 0xF0, 0xF4, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF,
    0xFE, 0xFE, 0xFE, 0xFF, 0xEF, 0xF0, 0xF4, 0xFF, 0xE1, 0xE3, 0xEA, 0xFF, 0xD7, 0xD8, 0xE1, 0xFF,
    0xCA, 0xCC, 0xD7, 0xFF, 0x9F, 0xA2, 0xB9, 0xFF, 0x53, 0x59, 0xAA, 0xFE, 0x3F, 0x3F, 0xBC, 0xFD,
    0x2F, 0x2E, 0xB0, 0xFD, 0x22, 0x21, 0x9D, 0xFD, 0x17, 0x17, 0x87, 0xFD, 0x0F, 0x0F, 0x6F, 0xFD,
    0x0A, 0x0A, 0x56, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x0A, 0x0A, 0x56, 0xFD,
    0x0F, 0x0F, 0x6D, 0xFD, 0x16, 0x16, 0x86, 0xFD, 0x21, 0x20, 0x9C, 0xFD, 0x2E, 0x2D, 0xAE, 0xFD,
    0x4E, 0x55, 0xAA, 0xFE, 0xCC, 0xCE, 0xDA, 0xFF, 0xFC, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xF5, 0xF8, 0xFF,
    0xF5, 0xF5, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFC, 0xFC, 0xFF, 0xCA, 0xCC, 0xD9, 0xFF, 0x4D, 0x54, 0xAB, 0xFE,
    0x2E, 0x2D, 0xAE, 0xFD, 0x21, 0x20, 0x9C, 0xFD, 0x16, 0x16, 0x86, 0xFD, 0x0F, 0x0F, 0x6D, 0xFD,
    0x0A, 0x0A, 0x56, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x09, 0x09, 0x55, 0xFD,
    0x0E, 0x0E, 0x68, 0xFD, 0x15, 0x15, 0x81, 0xFD, 0x1F, 0x1E, 0x99, 0xFD, 0x2A, 0x29, 0xAB, 0xFD,
    0x92, 0x97, 0xB6, 0xFF, 0xFB, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0xEC, 0xF1, 0xFF,
    0xEB, 0xEC, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFB, 0xFC, 0xFF, 0x93, 0x98, 0xB7, 0xFF,
    0x2A, 0x29, 0xAB, 0xFD, 0x1F, 0x1E, 0x99, 0xFD, 0x15, 0x15, 0x81, 0xFD, 0x0E, 0x0E, 0x68, 0xFD,
    0x09, 0x09, 0x55, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA1, 0x71, 0x8F, 0xB0, 0xE1, 0xF8, 0xF2, 0xC8, 0xF9, 0x07, 0x07, 0x54, 0xFD,
    0x0C, 0x0C, 0x62, 0xFD, 0x12, 0x12, 0x7B, 0xFD, 0x1B, 0x1A, 0x94, 0xFD, 0x26, 0x25, 0xA6, 0xFD,
    0x9F, 0xA3, 0xB8, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE6, 0xE7, 0xED, 0xFF,
    0xE7, 0xE8, 0xED, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0xA0, 0xA4, 0xBB, 0xFF,
    0x26, 0x25, 0xA6, 0xFD, 0x1B, 0x1A, 0x94, 0xFD, 0x12, 0x12, 0x7B, 0xFD, 0x0C, 0x0C, 0x62, 0xFD,
    0x07, 0x07, 0x54, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE1, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA0, 0x71, 0x8F, 0xB0, 0xE0, 0xF8, 0xF2, 0xC8, 0xF9, 0x07, 0x07, 0x54, 0xFD,
    0x0A, 0x0A, 0x5E, 0xFD, 0x10, 0x10, 0x75, 0xFD, 0x17, 0x17, 0x8B, 0xFD, 0x21, 0x20, 0x9F, 0xFD,
    0x5E, 0x65, 0xA3, 0xFE, 0xD8, 0xD9, 0xE2, 0xFF, 0xF7, 0xF7, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE1, 0xE7, 0xFF,
    0xE0, 0xE1, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xF6, 0xF8, 0xFF, 0xD7, 0xD9, 0xE2, 0xFF, 0x5E, 0x64, 0xA6, 0xFE,
    0x21, 0x20, 0x9F, 0xFD, 0x17, 0x17, 0x8B, 0xFD, 0x10, 0x10, 0x75, 0xFD, 0x0A, 0x0A, 0x5E, 0xFD,
    0x07, 0x07, 0x54, 0xFD, 0xF8, 0xF2, 0xC8, 0xF9, 0x71, 0x8F, 0xB0, 0xE0, 0x37, 0x00, 0x88, 0xA0,
    0x37, 0x00, 0x88, 0x99, 0x71, 0x8F, 0xB0, 0xDB, 0xF8, 0xF2, 0xC8, 0xF6, 0x06, 0x06, 0x53, 0xFC,
    0x08, 0x08, 0x55, 0xFD, 0x0D, 0x0D, 0x6A, 0xFD, 0x14, 0x14, 0x81, 0xFD, 0x1B, 0x1A, 0x95, 0xFD,
    0x24, 0x25, 0xA3, 0xFD, 0x48, 0x4E, 0xA5, 0xFE, 0x8B, 0x8F, 0xB1, 0xFF, 0xF3, 0xF4, 0xF6, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBE, 0xC1, 0xCF, 0xFF,
    0xC0, 0xC3, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF2, 0xF2, 0xF5, 0xFF, 0x86, 0x8C, 0xB1, 0xFF, 0x47, 0x4F, 0xA5, 0xFE, 0x24, 0x25, 0xA3, 0xFD,
    0x1B, 0x1A, 0x95, 0xFD, 0x14, 0x14, 0x81, 0xFD, 0x0D, 0x0D, 0x6A, 0xFD, 0x08, 0x08, 0x55, 0xFD,
    0x06, 0x06, 0x53, 0xFC, 0xF8, 0xF2, 0xC8, 0xF6, 0x71, 0x8F, 0xB0, 0xDB, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0xC5, 0xF8, 0xF2, 0xC7, 0xEB, 0xF8, 0xF2, 0xC8, 0xF9,
    0x07, 0x07, 0x54, 0xFC, 0x0A, 0x0A, 0x5F, 0xFD, 0x0E, 0x0E, 0x74, 0xFD, 0x15, 0x15, 0x8A, 0xFD,
    0x1D, 0x1C, 0x9B, 0xFD, 0x25, 0x24, 0xA9, 0xFD, 0x41, 0x48, 0xA6, 0xFE, 0xD3, 0xD4, 0xDD, 0xFF,
    0xFD, 0xFD, 0xFE, 0xFF, 0xFD, 0xFD, 0xFE, 0xFF, 0xDE, 0xE0, 0xE6, 0xFF, 0x6C, 0x71, 0xAE, 0xFE,
    0x6C, 0x73, 0xAD, 0xFE, 0xDF, 0xE0, 0xE6, 0xFF, 0xFD, 0xFD, 0xFE, 0xFF, 0xFD, 0xFD, 0xFE, 0xFF,
    0xD0, 0xD2, 0xDD, 0xFF, 0x3E, 0x46, 0xA6, 0xFE, 0x25, 0x24, 0xA9, 0xFD, 0x1D, 0x1C, 0x9B, 0xFD,
    0x15, 0x15, 0x8A, 0xFD, 0x0E, 0x0E, 0x74, 0xFD, 0x0A, 0x0A, 0x5F, 0xFD, 0x07, 0x07, 0x54, 0xFC,
    0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xEB, 0x37, 0x00, 0x88, 0xC5, 0x37, 0x00, 0x88, 0x81,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED,
    0xF8, 0xF2, 0xC8, 0xF9, 0x08, 0x08, 0x55, 0xFC, 0x0B, 0x0B, 0x67, 0xFD, 0x10, 0x10, 0x7A, 0xFD,
    0x15, 0x15, 0x8D, 0xFD, 0x1C, 0x1B, 0x9D, 0xFD, 0x23, 0x24, 0xA6, 0xFD, 0x57, 0x5D, 0xA4, 0xFE,
    0x9C, 0xA0, 0xB9, 0xFF, 0x9A, 0x9E, 0xBB, 0xFF, 0x5A, 0x60, 0xAC, 0xFE, 0x35, 0x37, 0xBE, 0xFD,
    0x35, 0x37, 0xBE, 0xFD, 0x5C, 0x62, 0xAC, 0xFE, 0x9A, 0xA0, 0xBA, 0xFF, 0x9A, 0x9F, 0xBB, 0xFF,
    0x56, 0x5C, 0xA5, 0xFE, 0x23, 0x24, 0xA6, 0xFD, 0x1C, 0x1B, 0x9D, 0xFD, 0x15, 0x15, 0x8D, 0xFD,
    0x10, 0x10, 0x7A, 0xFD, 0x0B, 0x0B, 0x67, 0xFD, 0x08, 0x08, 0x55, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9,
    0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x96, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE,
    0xF8, 0xF2, 0xC7, 0xED, 0xF8, 0xF2, 0xC8, 0xF9, 0x08, 0x08, 0x57, 0xFC, 0x0B, 0x0B, 0x6B, 0xFD,
    0x10, 0x10, 0x7D, 0xFD, 0x14, 0x14, 0x8D, 0xFD, 0x19, 0x19, 0x99, 0xFD, 0x1E, 0x1D, 0xA4, 0xFD,
    0x23, 0x22, 0xAC, 0xFD, 0x26, 0x25, 0xB1, 0xFD, 0x27, 0x26, 0xB4, 0xFD, 0x28, 0x27, 0xB6, 0xFD,
    0x28, 0x27, 0xB6, 0xFD, 0x27, 0x26, 0xB4, 0xFD, 0x26, 0x25, 0xB1, 0xFD, 0x23, 0x22, 0xAC, 0xFD,
    0x1E, 0x1D, 0xA4, 0xFD, 0x19, 0x19, 0x99, 0xFD, 0x14, 0x14, 0x8D, 0xFD, 0x10, 0x10, 0x7D, 0xFD,
    0x0B, 0x0B, 0x6B, 0xFD, 0x08, 0x08, 0x57, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xED,
    0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED, 0xF8, 0xF2, 0xC8, 0xF9, 0x08, 0x08, 0x5A, 0xFC,
    0x0C, 0x0C, 0x6B, 0xFD, 0x0E, 0x0E, 0x7A, 0xFD, 0x12, 0x12, 0x89, 0xFD, 0x15, 0x15, 0x93, 0xFD,
    0x18, 0x18, 0x9C, 0xFD, 0x19, 0x19, 0xA1, 0xFD, 0x1B, 0x1A, 0xA6, 0xFD, 0x1D, 0x1C, 0xA8, 0xFD,
    0x1D, 0x1C, 0xA8, 0xFD, 0x1B, 0x1A, 0xA6, 0xFD, 0x19, 0x19, 0xA1, 0xFD, 0x18, 0x18, 0x9C, 0xFD,
    0x15, 0x15, 0x93, 0xFD, 0x12, 0x12, 0x89, 0xFD, 0x0E, 0x0E, 0x7A, 0xFD, 0x0C, 0x0C, 0x6B, 0xFD,
    0x08, 0x08, 0x5A, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED, 0xF8, 0xF2, 0xC8, 0xF9,
    0x07, 0x07, 0x56, 0xFC, 0x09, 0x09, 0x66, 0xFD, 0x0C, 0x0C, 0x73, 0xFD, 0x0E, 0x0E, 0x7E, 0xFD,
    0x10, 0x10, 0x88, 0xFD, 0x12, 0x12, 0x90, 0xFD, 0x12, 0x12, 0x94, 0xFD, 0x13, 0x13, 0x97, 0xFD,
    0x13, 0x13, 0x97, 0xFD, 0x12, 0x12, 0x94, 0xFD, 0x12, 0x12, 0x90, 0xFD, 0x10, 0x10, 0x88, 0xFD,
    0x0E, 0x0E, 0x7E, 0xFD, 0x0C, 0x0C, 0x73, 0xFD, 0x09, 0x09, 0x66, 0xFD, 0x07, 0x07, 0x56, 0xFC,
    0xF8, 0xF2, 0xC8, 0xF9, 0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xED,
    0xF8, 0xF2, 0xC8, 0xF9, 0x05, 0x05, 0x53, 0xFC, 0x08, 0x08, 0x5E, 0xFD, 0x09, 0x09, 0x68, 0xFD,
    0x0A, 0x0A, 0x72, 0xFD, 0x0B, 0x0B, 0x78, 0xFD, 0x0C, 0x0C, 0x7D, 0xFD, 0x0C, 0x0C, 0x82, 0xFD,
    0x0C, 0x0C, 0x82, 0xFD, 0x0C, 0x0C, 0x7D, 0xFD, 0x0B, 0x0B, 0x78, 0xFD, 0x0A, 0x0A, 0x72, 0xFD,
    0x09, 0x09, 0x68, 0xFD, 0x08, 0x08, 0x5E, 0xFD, 0x05, 0x05, 0x53, 0xFC, 0xF8, 0xF2, 0xC8, 0xF9,
    0xF8, 0xF2, 0xC7, 0xED, 0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xCE,
    0xF8, 0xF2, 0xC7, 0xEC, 0xF8, 0xF2, 0xC8, 0xF8, 0x05, 0x05, 0x53, 0xFC, 0x05, 0x05, 0x53, 0xFD,
    0x07, 0x07, 0x5C, 0xFD, 0x07, 0x07, 0x60, 0xFD, 0x07, 0x07, 0x65, 0xFD, 0x07, 0x07, 0x69, 0xFD,
    0x07, 0x07, 0x69, 0xFD, 0x07, 0x07, 0x65, 0xFD, 0x07, 0x07, 0x60, 0xFD, 0x07, 0x07, 0x5C, 0xFD,
    0x05, 0x05, 0x53, 0xFD, 0x05, 0x05, 0x53, 0xFC, 0xF8, 0xF2, 0xC8, 0xF8, 0xF8, 0xF2, 0xC7, 0xEC,
    0x37, 0x00, 0x88, 0xCE, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xCE, 0xF8, 0xF2, 0xC7, 0xEB, 0xF8, 0xF2, 0xC7, 0xF6, 0xF8, 0xF2, 0xC7, 0xF8,
    0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9,
    0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9, 0xF8, 0xF2, 0xC7, 0xF9,
    0xF8, 0xF2, 0xC7, 0xF8, 0xF8, 0xF2, 0xC7, 0xF6, 0xF8, 0xF2, 0xC7, 0xEB, 0x37, 0x00, 0x88, 0xCE,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xC6, 0x71, 0x8F, 0xB0, 0xDB, 0x71, 0x8F, 0xB0, 0xE0,
    0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1,
    0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1, 0x71, 0x8F, 0xB0, 0xE1,
    0x71, 0x8F, 0xB0, 0xE0, 0x71, 0x8F, 0xB0, 0xDB, 0x37, 0x00, 0x88, 0xC6, 0x37, 0x00, 0x88, 0x96,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0x9A, 0x37, 0x00, 0x88, 0xA1,
    0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2,
    0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2, 0x37, 0x00, 0x88, 0xA2,
    0x37, 0x00, 0x88, 0xA1, 0x37, 0x00, 0x88, 0x9A, 0x37, 0x00, 0x88, 0x81, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];
